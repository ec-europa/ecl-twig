<?php

use Webmozart\PathUtil\Path;

require_once __DIR__ . '/../bootstrap.php';
require_once __DIR__ . '/../resources/helpers.php';

$helpers = new storyHelpers();
$result_extension = '.php.html';
$extension = '.html.twig';
$output_folder = 'php';
$systems = !empty($argv[1]) ? [$argv[1]] : ['ec', 'eu'];
$prefix = 'ecl-';
$root_folder = __DIR__ . '/../../../';
$root_folder_abs = Path::canonicalize($root_folder);
$packages_folder = $root_folder_abs . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'ec' . DIRECTORY_SEPARATOR . 'packages';

foreach ($systems as $system) {
  // The place to store HTML output of the Twig PHP renderer.
  $system_path = $root_folder_abs . DIRECTORY_SEPARATOR . $output_folder . DIRECTORY_SEPARATOR . 'packages' . DIRECTORY_SEPARATOR . $system;
  // This is a list of components, as generated by JavaScript.
  // Thus, the list will contain only components for which we have demo data.
  $components = array_slice(scandir(Path::canonicalize($system_path)), 2);

  foreach ($components as $component) {
    $component_group = $component_family = '';
    $template = '@ecl-twig/ec-component-' . $component . '/' . $prefix . $component;
    // Our validation component.
    if ($component == 'ecl-compliance') {
      continue;
    }
    // Two known exceptions.
    if ($component == 'checkbox' || $component == 'radio') {
      $template = $template . '-group';
    }
    // Deprecated components.
    $deprecated_component = $helpers->deprecatedComponents($component);
    // Grouping components in families and variants.
    $component_group = $helpers->groupComponents($component);
    $template = $template . $extension;
    $specs_folder = Path::canonicalize($system_path . DIRECTORY_SEPARATOR . $component . DIRECTORY_SEPARATOR . 'specs');
    $folder = Path::canonicalize($system_path . DIRECTORY_SEPARATOR . $component);
    // Get the list of data files.
    // For each data file the renderer will create an HTML file.
    $files = array_slice(scandir($specs_folder), 2);
    $data_story = $prepend = '';

    foreach ($files as $file_name) {
      $data_html = $base_component = '';
      try {
        $variant = str_replace(
          '.json',
          '',
          str_replace('data', $component, $file_name)
        );

        $data_string = file_get_contents(
          $specs_folder . DIRECTORY_SEPARATOR . $file_name
        );

        $data_json = json_decode($data_string, TRUE);

        if (!empty($data_json)) {
          $base_component = $helpers->baseComponent($variant);
          $data_html_raw = $twig->render($template, $data_json);
          $data_html = $helpers->fixHtml($data_html_raw, $component, $data_json);
          // Save the rendered html in a file .php.html
          file_put_contents(
            $folder . DIRECTORY_SEPARATOR . $variant . $result_extension,
            $data_html
          );

          $adapted_variant = str_replace('-', '_', $variant);
          if ($pos = strpos($adapted_variant, '__')) {
            $variant_name = ucfirst(substr($adapted_variant, $pos + 2));
            if (ctype_digit(substr($variant_name, 0, 1))) {
              $variant_name = substr($variant_name, 2) . '_' . substr($variant_name, 0, 1);
            }
          } else {
            $variant_name = 'Default';
          }
          // Create the story file if it doesn't exist yet and links the README file.
          if (!file_exists($folder . DIRECTORY_SEPARATOR . 'story' . DIRECTORY_SEPARATOR . $base_component . '.story.js')) {
            $helpers->createStoryFiles(
              $folder,
              $base_component,
              $adapted_variant,
              $variant,
              $deprecated_component,
              $component_group,
              $packages_folder
            );
          }
          // Prepare the data to be added to the story file.
          $export_code = $helpers->setExportCode($variant_name, $adapted_variant);
          $story_code = $helpers->setStoryCode($variant_name, $adapted_variant);
          if ($variant_name === 'Default') {
            $data_story = $export_code . $story_code . $data_story;
          } else {
            $data_story = $data_story . $export_code . $story_code;
          }
          $prepend .= $helpers->setImportCode($adapted_variant, $variant, $result_extension);
        }
      } catch (exception $e) {
        // Not throwing facilitates continuation.
        // If a component has an error it's not going to stop the rest.
        // throw new Exception($e);
        print($e);
      }
    }
    // Here we add the import for the rendered files to the story file.
    $helpers->prependToStory($prepend, $folder . DIRECTORY_SEPARATOR . 'story' . DIRECTORY_SEPARATOR . $base_component . '.story.js');
    // Here we update the story file with all the variants we've found.
    $helpers->updateStoryFile($folder, $base_component, $data_story);
  }
}
